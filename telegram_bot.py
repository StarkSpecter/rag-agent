# üìÅ telegram_bot.py ‚Äî —Å–ª–æ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram)
import logging
from telegram import Update, Document
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from rag_agent import get_rag_chain
from db_utils import add_documents
from user_db import init_user_db, check_credentials
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
import os

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
LOGIN, PASSWORD, AUTHED, ROLE_USER = range(4)
ROLE_ADMIN = 0
ROLE_USER_INT = 1

# --- Telegram Handlers ---
auth_users = {}
rag_chain = get_rag_chain()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_username = update.effective_user.username
    logger.info(f"/start –æ—Ç {update.effective_user.id}, username: {tg_username}")
    if tg_username:
        context.user_data["username"] = tg_username
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
        return PASSWORD
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ –∑–∞–¥–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram. –í–≤–µ–¥–∏ –∏–º—è –≤—Ä—É—á–Ω—É—é:")
        return LOGIN

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è: {update.message.text}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å:")
    return PASSWORD

async def password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = context.user_data.get("username")
    password = update.message.text
    valid, role = check_credentials(username, password)
    if valid:
        auth_users[update.effective_user.id] = role
        role_label = "admin" if role == ROLE_ADMIN else "user"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤–æ—à—ë–ª –∫–∞–∫ {role_label}")
        await update.message.reply_text(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ {role_label}. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω).")
        return ROLE_USER
    else:
        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {username}")
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ /start")
        return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in auth_users:
        logger.info(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}")
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    role = auth_users[user_id]
    if update.message.document and role == ROLE_ADMIN:
        file = update.message.document
        if file.mime_type == "application/pdf":
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ PDF –æ—Ç {user_id}: {file.file_name}")
            file_path = await file.get_file()
            local_path = f"temp/{file.file_name}"
            os.makedirs("temp", exist_ok=True)
            await file_path.download_to_drive(local_path)
            loader = PyPDFLoader(local_path)
            splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=100)
            docs = splitter.split_documents(loader.load())
            logger.info(f"–†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(docs)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É...")
            add_documents(docs)
            logger.info("–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")
            os.remove(local_path)
        else:
            logger.warning(f"–§–∞–π–ª –Ω–µ PDF –æ—Ç {user_id}")
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
    elif update.message.text:
        query = update.message.text
        logger.info(f"–í–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {query}")
        response = rag_chain.invoke({"question": query})
        await update.message.reply_text(response.strip())
    else:
        logger.warning(f"–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –≤–≤–æ–¥ –æ—Ç {user_id}")
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ PDF-—Ñ–∞–π–ª.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
    await update.message.reply_text("–û–∫–µ–π, –≤—ã—Ö–æ–¥ –∏–∑ —Å–µ—Å—Å–∏–∏.")
    return ConversationHandler.END

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    init_user_db()
    try:
        with open("bot_token.txt", "r", encoding="utf-8") as f:
            token = f.read().strip()
    except FileNotFoundError:
        logger.error("–§–∞–π–ª bot_token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise ValueError("–§–∞–π–ª bot_token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–º–µ—Å—Ç–∏ —Ç—É–¥–∞ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞")

    app = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password)],
            ROLE_USER: [MessageHandler(filters.ALL, handle_message)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
